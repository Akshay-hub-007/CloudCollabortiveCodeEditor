import {
  CreateThreadError,
  _useRoom,
  getUmbrellaStoreForClient,
  useClient
} from "./chunk-A7GJNN4L.mjs";

// src/use-mention-suggestions.ts
import { kInternal, stringify } from "@liveblocks/core";
import React from "react";
var MENTION_SUGGESTIONS_DEBOUNCE = 500;
function useMentionSuggestions(search) {
  const client = useClient();
  const room = _useRoom();
  const [mentionSuggestions, setMentionSuggestions] = React.useState();
  const lastInvokedAt = React.useRef();
  React.useEffect(() => {
    const mentionSuggestionsCache = client[kInternal].mentionSuggestionsCache;
    const resolveMentionSuggestions = client[kInternal].resolveMentionSuggestions;
    if (search === void 0 || !resolveMentionSuggestions) {
      return;
    }
    const resolveMentionSuggestionsArgs = { text: search, roomId: room.id };
    const mentionSuggestionsCacheKey = stringify(resolveMentionSuggestionsArgs);
    let debounceTimeout;
    let isCanceled = false;
    const getMentionSuggestions = async () => {
      try {
        lastInvokedAt.current = performance.now();
        const mentionSuggestions2 = await resolveMentionSuggestions(
          resolveMentionSuggestionsArgs
        );
        if (!isCanceled) {
          setMentionSuggestions(mentionSuggestions2);
          mentionSuggestionsCache.set(
            mentionSuggestionsCacheKey,
            mentionSuggestions2
          );
        }
      } catch (error) {
        console.error(error?.message);
      }
    };
    if (mentionSuggestionsCache.has(mentionSuggestionsCacheKey)) {
      setMentionSuggestions(
        mentionSuggestionsCache.get(mentionSuggestionsCacheKey)
      );
    } else if (!lastInvokedAt.current || Math.abs(performance.now() - lastInvokedAt.current) > MENTION_SUGGESTIONS_DEBOUNCE) {
      void getMentionSuggestions();
    } else {
      debounceTimeout = window.setTimeout(() => {
        void getMentionSuggestions();
      }, MENTION_SUGGESTIONS_DEBOUNCE);
    }
    return () => {
      isCanceled = true;
      window.clearTimeout(debounceTimeout);
    };
  }, [client, room.id, search]);
  return mentionSuggestions;
}
export {
  CreateThreadError,
  getUmbrellaStoreForClient,
  useMentionSuggestions
};
//# sourceMappingURL=_private.mjs.map