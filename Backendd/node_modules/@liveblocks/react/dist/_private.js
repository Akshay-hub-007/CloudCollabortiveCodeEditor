"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }




var _chunk3MM4G6XBjs = require('./chunk-3MM4G6XB.js');

// src/use-mention-suggestions.ts
var _core = require('@liveblocks/core');
var _react = require('react'); var _react2 = _interopRequireDefault(_react);
var MENTION_SUGGESTIONS_DEBOUNCE = 500;
function useMentionSuggestions(search) {
  const client = _chunk3MM4G6XBjs.useClient.call(void 0, );
  const room = _chunk3MM4G6XBjs._useRoom.call(void 0, );
  const [mentionSuggestions, setMentionSuggestions] = _react2.default.useState();
  const lastInvokedAt = _react2.default.useRef();
  _react2.default.useEffect(() => {
    const mentionSuggestionsCache = client[_core.kInternal].mentionSuggestionsCache;
    const resolveMentionSuggestions = client[_core.kInternal].resolveMentionSuggestions;
    if (search === void 0 || !resolveMentionSuggestions) {
      return;
    }
    const resolveMentionSuggestionsArgs = { text: search, roomId: room.id };
    const mentionSuggestionsCacheKey = _core.stringify.call(void 0, resolveMentionSuggestionsArgs);
    let debounceTimeout;
    let isCanceled = false;
    const getMentionSuggestions = async () => {
      try {
        lastInvokedAt.current = performance.now();
        const mentionSuggestions2 = await resolveMentionSuggestions(
          resolveMentionSuggestionsArgs
        );
        if (!isCanceled) {
          setMentionSuggestions(mentionSuggestions2);
          mentionSuggestionsCache.set(
            mentionSuggestionsCacheKey,
            mentionSuggestions2
          );
        }
      } catch (error) {
        console.error(_optionalChain([error, 'optionalAccess', _ => _.message]));
      }
    };
    if (mentionSuggestionsCache.has(mentionSuggestionsCacheKey)) {
      setMentionSuggestions(
        mentionSuggestionsCache.get(mentionSuggestionsCacheKey)
      );
    } else if (!lastInvokedAt.current || Math.abs(performance.now() - lastInvokedAt.current) > MENTION_SUGGESTIONS_DEBOUNCE) {
      void getMentionSuggestions();
    } else {
      debounceTimeout = window.setTimeout(() => {
        void getMentionSuggestions();
      }, MENTION_SUGGESTIONS_DEBOUNCE);
    }
    return () => {
      isCanceled = true;
      window.clearTimeout(debounceTimeout);
    };
  }, [client, room.id, search]);
  return mentionSuggestions;
}




exports.CreateThreadError = _chunk3MM4G6XBjs.CreateThreadError; exports.getUmbrellaStoreForClient = _chunk3MM4G6XBjs.getUmbrellaStoreForClient; exports.useMentionSuggestions = useMentionSuggestions;
//# sourceMappingURL=_private.js.map